
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package edu.robertob.p2compi1.models;

import java_cup.runtime.*;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ContentParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public ContentParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ContentParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ContentParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\046\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\003\010\000\002\004\005\000\002\005\005" +
    "\000\002\015\005\000\002\016\005\000\002\017\003\000" +
    "\002\017\004\000\002\020\005\000\002\027\010\000\002" +
    "\030\005\000\002\031\005\000\002\032\003\000\002\032" +
    "\004\000\002\033\005\000\002\034\005\000\002\035\005" +
    "\000\002\006\010\000\002\007\005\000\002\010\005\000" +
    "\002\010\005\000\002\014\003\000\002\014\004\000\002" +
    "\011\005\000\002\012\005\000\002\013\005\000\002\021" +
    "\010\000\002\022\003\000\002\022\004\000\002\023\005" +
    "\000\002\024\005\000\002\025\005\000\002\026\004\000" +
    "\002\026\004\000\002\026\004\000\002\026\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\136\000\004\004\005\001\002\000\004\002\140\001" +
    "\002\000\006\010\015\011\136\001\002\000\006\004\uffdc" +
    "\006\uffdc\001\002\000\004\004\013\001\002\000\004\002" +
    "\000\001\002\000\004\002\uffff\001\002\000\006\004\013" +
    "\006\022\001\002\000\004\010\015\001\002\000\006\004" +
    "\ufff9\006\ufff9\001\002\000\004\016\016\001\002\000\004" +
    "\020\017\001\002\000\004\022\020\001\002\000\004\005" +
    "\021\001\002\000\006\004\ufffe\006\ufffe\001\002\000\004" +
    "\011\025\001\002\000\004\002\ufff7\001\002\000\006\004" +
    "\ufff8\006\ufff8\001\002\000\004\005\026\001\002\000\004" +
    "\002\ufffa\001\002\000\006\004\030\006\037\001\002\000" +
    "\010\013\130\015\132\025\131\001\002\000\006\004\uffde" +
    "\006\uffde\001\002\000\004\004\113\001\002\000\004\004" +
    "\070\001\002\000\006\004\uffdf\006\uffdf\001\002\000\006" +
    "\004\uffdd\006\uffdd\001\002\000\010\002\ufffc\004\ufffc\006" +
    "\ufffc\001\002\000\004\010\066\001\002\000\004\004\041" +
    "\001\002\000\004\012\061\001\002\000\006\021\052\023" +
    "\053\001\002\000\006\004\uffea\006\uffea\001\002\000\006" +
    "\004\041\006\045\001\002\000\004\013\050\001\002\000" +
    "\006\004\uffe6\006\uffe6\001\002\000\006\004\uffe9\006\uffe9" +
    "\001\002\000\004\005\051\001\002\000\006\004\uffe7\006" +
    "\uffe7\001\002\000\004\006\055\001\002\000\004\006\055" +
    "\001\002\000\006\004\uffec\006\uffec\001\002\000\004\012" +
    "\056\001\002\000\004\005\057\001\002\000\006\004\uffed" +
    "\006\uffed\001\002\000\006\004\uffeb\006\uffeb\001\002\000" +
    "\004\016\062\001\002\000\004\020\063\001\002\000\004" +
    "\022\064\001\002\000\004\005\065\001\002\000\006\021" +
    "\uffee\023\uffee\001\002\000\004\005\067\001\002\000\010" +
    "\002\ufffd\004\ufffd\006\ufffd\001\002\000\004\024\106\001" +
    "\002\000\004\023\101\001\002\000\006\004\ufff3\006\ufff3" +
    "\001\002\000\006\004\070\006\074\001\002\000\004\025" +
    "\077\001\002\000\006\004\ufff2\006\ufff2\001\002\000\006" +
    "\004\uffef\006\uffef\001\002\000\004\005\100\001\002\000" +
    "\006\004\ufff0\006\ufff0\001\002\000\004\006\103\001\002" +
    "\000\006\004\ufff4\006\ufff4\001\002\000\004\024\104\001" +
    "\002\000\004\005\105\001\002\000\006\004\ufff5\006\ufff5" +
    "\001\002\000\004\016\107\001\002\000\004\020\110\001" +
    "\002\000\004\022\111\001\002\000\004\005\112\001\002" +
    "\000\004\023\ufff6\001\002\000\004\014\123\001\002\000" +
    "\006\004\uffe4\006\uffe4\001\002\000\006\004\113\006\116" +
    "\001\002\000\004\015\121\001\002\000\006\004\uffe3\006" +
    "\uffe3\001\002\000\006\004\uffe0\006\uffe0\001\002\000\004" +
    "\005\122\001\002\000\006\004\uffe1\006\uffe1\001\002\000" +
    "\004\017\124\001\002\000\004\020\125\001\002\000\004" +
    "\022\126\001\002\000\004\007\127\001\002\000\006\004" +
    "\uffe5\006\uffe5\001\002\000\004\005\135\001\002\000\004" +
    "\005\134\001\002\000\004\005\133\001\002\000\004\004" +
    "\uffe2\001\002\000\004\004\ufff1\001\002\000\004\004\uffe8" +
    "\001\002\000\004\005\137\001\002\000\004\004\ufffb\001" +
    "\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\136\000\014\002\003\003\005\005\010\015\006\020" +
    "\007\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\026\026\001\001\000\010\003\005\005\013\017\011\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\003\005" +
    "\005\023\016\022\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\004\035\011\037\013\033\023\031\025" +
    "\030\033\032\035\034\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\021\113\022\114\001\001\000\010\027" +
    "\070\031\071\032\072\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\006" +
    "\041\010\042\014\043\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\006\041\010\046\012" +
    "\045\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\007" +
    "\057\001\001\000\004\007\053\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\027\070\031\074\034\075\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\030\101\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\021\116\024\117\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ContentParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ContentParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ContentParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    Action currentAction;


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ContentParser$actions {
  private final ContentParser parser;

  /** Constructor */
  CUP$ContentParser$actions(ContentParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ContentParser$do_action_part00000000(
    int                        CUP$ContentParser$act_num,
    java_cup.runtime.lr_parser CUP$ContentParser$parser,
    java.util.Stack            CUP$ContentParser$stack,
    int                        CUP$ContentParser$top)
    throws Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ContentParser$result;

      /* select the action based on the action number */
      switch (CUP$ContentParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= instructions EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ContentParser$stack.elementAt(CUP$ContentParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ContentParser$stack.elementAt(CUP$ContentParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ContentParser$stack.elementAt(CUP$ContentParser$top-1)).value;
		RESULT = start_val;
              CUP$ContentParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ContentParser$stack.elementAt(CUP$ContentParser$top-1)), ((java_cup.runtime.Symbol)CUP$ContentParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ContentParser$parser.done_parsing();
          return CUP$ContentParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // instructions ::= actions 
            {
              Object RESULT =null;
		
//    RESULT = action;

              CUP$ContentParser$result = parser.getSymbolFactory().newSymbol("instructions",0, ((java_cup.runtime.Symbol)CUP$ContentParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ContentParser$stack.peek()), RESULT);
            }
          return CUP$ContentParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // instructions ::= main_action 
            {
              Object RESULT =null;
		
        RESULT = currentAction;
    
              CUP$ContentParser$result = parser.getSymbolFactory().newSymbol("instructions",0, ((java_cup.runtime.Symbol)CUP$ContentParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ContentParser$stack.peek()), RESULT);
            }
          return CUP$ContentParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // action_open ::= TAG_START ACTION_TAG_NAME NAME_ATTR EQUALS ATTR_VALUE TAG_END 
            {
              Object RESULT =null;
		int actionNameleft = ((java_cup.runtime.Symbol)CUP$ContentParser$stack.elementAt(CUP$ContentParser$top-1)).left;
		int actionNameright = ((java_cup.runtime.Symbol)CUP$ContentParser$stack.elementAt(CUP$ContentParser$top-1)).right;
		String actionName = (String)((java_cup.runtime.Symbol) CUP$ContentParser$stack.elementAt(CUP$ContentParser$top-1)).value;
		
    currentAction = new Action(actionName);
//    RESULT = action_name;
 
              CUP$ContentParser$result = parser.getSymbolFactory().newSymbol("action_open",1, ((java_cup.runtime.Symbol)CUP$ContentParser$stack.elementAt(CUP$ContentParser$top-5)), ((java_cup.runtime.Symbol)CUP$ContentParser$stack.peek()), RESULT);
            }
          return CUP$ContentParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // action_close ::= TAG_CLOSE ACTION_TAG_NAME TAG_END 
            {
              Object RESULT =null;

              CUP$ContentParser$result = parser.getSymbolFactory().newSymbol("action_close",2, ((java_cup.runtime.Symbol)CUP$ContentParser$stack.elementAt(CUP$ContentParser$top-2)), ((java_cup.runtime.Symbol)CUP$ContentParser$stack.peek()), RESULT);
            }
          return CUP$ContentParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // main_action ::= action_open action_content action_close 
            {
              Object RESULT =null;

              CUP$ContentParser$result = parser.getSymbolFactory().newSymbol("main_action",3, ((java_cup.runtime.Symbol)CUP$ContentParser$stack.elementAt(CUP$ContentParser$top-2)), ((java_cup.runtime.Symbol)CUP$ContentParser$stack.peek()), RESULT);
            }
          return CUP$ContentParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // actions_open ::= TAG_START ACTIONS_TAG_NAME TAG_END 
            {
              Object RESULT =null;

              CUP$ContentParser$result = parser.getSymbolFactory().newSymbol("actions_open",11, ((java_cup.runtime.Symbol)CUP$ContentParser$stack.elementAt(CUP$ContentParser$top-2)), ((java_cup.runtime.Symbol)CUP$ContentParser$stack.peek()), RESULT);
            }
          return CUP$ContentParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // actions_close ::= TAG_CLOSE ACTIONS_TAG_NAME TAG_END 
            {
              Object RESULT =null;

              CUP$ContentParser$result = parser.getSymbolFactory().newSymbol("actions_close",12, ((java_cup.runtime.Symbol)CUP$ContentParser$stack.elementAt(CUP$ContentParser$top-2)), ((java_cup.runtime.Symbol)CUP$ContentParser$stack.peek()), RESULT);
            }
          return CUP$ContentParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // actions_list ::= main_action 
            {
              Object RESULT =null;

              CUP$ContentParser$result = parser.getSymbolFactory().newSymbol("actions_list",13, ((java_cup.runtime.Symbol)CUP$ContentParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ContentParser$stack.peek()), RESULT);
            }
          return CUP$ContentParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // actions_list ::= actions_list main_action 
            {
              Object RESULT =null;

              CUP$ContentParser$result = parser.getSymbolFactory().newSymbol("actions_list",13, ((java_cup.runtime.Symbol)CUP$ContentParser$stack.elementAt(CUP$ContentParser$top-1)), ((java_cup.runtime.Symbol)CUP$ContentParser$stack.peek()), RESULT);
            }
          return CUP$ContentParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // actions ::= actions_open actions_list actions_close 
            {
              Object RESULT =null;

              CUP$ContentParser$result = parser.getSymbolFactory().newSymbol("actions",14, ((java_cup.runtime.Symbol)CUP$ContentParser$stack.elementAt(CUP$ContentParser$top-2)), ((java_cup.runtime.Symbol)CUP$ContentParser$stack.peek()), RESULT);
            }
          return CUP$ContentParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // attribute_open ::= TAG_START ATTR_TAG_NAME NAME_ATTR EQUALS ATTR_VALUE TAG_END 
            {
              Object RESULT =null;
		int attrNameleft = ((java_cup.runtime.Symbol)CUP$ContentParser$stack.elementAt(CUP$ContentParser$top-1)).left;
		int attrNameright = ((java_cup.runtime.Symbol)CUP$ContentParser$stack.elementAt(CUP$ContentParser$top-1)).right;
		String attrName = (String)((java_cup.runtime.Symbol) CUP$ContentParser$stack.elementAt(CUP$ContentParser$top-1)).value;
		 RESULT = attrName; 
              CUP$ContentParser$result = parser.getSymbolFactory().newSymbol("attribute_open",21, ((java_cup.runtime.Symbol)CUP$ContentParser$stack.elementAt(CUP$ContentParser$top-5)), ((java_cup.runtime.Symbol)CUP$ContentParser$stack.peek()), RESULT);
            }
          return CUP$ContentParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // attribute_close ::= TAG_CLOSE ATTR_TAG_NAME TAG_END 
            {
              Object RESULT =null;

              CUP$ContentParser$result = parser.getSymbolFactory().newSymbol("attribute_close",22, ((java_cup.runtime.Symbol)CUP$ContentParser$stack.elementAt(CUP$ContentParser$top-2)), ((java_cup.runtime.Symbol)CUP$ContentParser$stack.peek()), RESULT);
            }
          return CUP$ContentParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // attribute ::= attribute_open PARAM_VALUE attribute_close 
            {
              Object RESULT =null;
		int attrNameleft = ((java_cup.runtime.Symbol)CUP$ContentParser$stack.elementAt(CUP$ContentParser$top-2)).left;
		int attrNameright = ((java_cup.runtime.Symbol)CUP$ContentParser$stack.elementAt(CUP$ContentParser$top-2)).right;
		Object attrName = (Object)((java_cup.runtime.Symbol) CUP$ContentParser$stack.elementAt(CUP$ContentParser$top-2)).value;
		int attrValueleft = ((java_cup.runtime.Symbol)CUP$ContentParser$stack.elementAt(CUP$ContentParser$top-1)).left;
		int attrValueright = ((java_cup.runtime.Symbol)CUP$ContentParser$stack.elementAt(CUP$ContentParser$top-1)).right;
		String attrValue = (String)((java_cup.runtime.Symbol) CUP$ContentParser$stack.elementAt(CUP$ContentParser$top-1)).value;
		
    if (!currentAction.getName().equals("AGREGAR_COMPONENTE")) {
        currentAction.addError("El uso de atributos no está permitido en la acción " + currentAction.getName() + " se encontró el atributo " + attrName);
    }
    Attribute attr = new Attribute((String)attrName, (String)attrValue);
    currentAction.addAttribute(attr);

              CUP$ContentParser$result = parser.getSymbolFactory().newSymbol("attribute",23, ((java_cup.runtime.Symbol)CUP$ContentParser$stack.elementAt(CUP$ContentParser$top-2)), ((java_cup.runtime.Symbol)CUP$ContentParser$stack.peek()), RESULT);
            }
          return CUP$ContentParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // attributes_list ::= attribute 
            {
              Object RESULT =null;

              CUP$ContentParser$result = parser.getSymbolFactory().newSymbol("attributes_list",24, ((java_cup.runtime.Symbol)CUP$ContentParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ContentParser$stack.peek()), RESULT);
            }
          return CUP$ContentParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // attributes_list ::= attributes_list attribute 
            {
              Object RESULT =null;

              CUP$ContentParser$result = parser.getSymbolFactory().newSymbol("attributes_list",24, ((java_cup.runtime.Symbol)CUP$ContentParser$stack.elementAt(CUP$ContentParser$top-1)), ((java_cup.runtime.Symbol)CUP$ContentParser$stack.peek()), RESULT);
            }
          return CUP$ContentParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // attributes_open ::= TAG_START ATTRS_TAG_NAME TAG_END 
            {
              Object RESULT =null;

              CUP$ContentParser$result = parser.getSymbolFactory().newSymbol("attributes_open",25, ((java_cup.runtime.Symbol)CUP$ContentParser$stack.elementAt(CUP$ContentParser$top-2)), ((java_cup.runtime.Symbol)CUP$ContentParser$stack.peek()), RESULT);
            }
          return CUP$ContentParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // attributes_close ::= TAG_CLOSE ATTRS_TAG_NAME TAG_END 
            {
              Object RESULT =null;

              CUP$ContentParser$result = parser.getSymbolFactory().newSymbol("attributes_close",26, ((java_cup.runtime.Symbol)CUP$ContentParser$stack.elementAt(CUP$ContentParser$top-2)), ((java_cup.runtime.Symbol)CUP$ContentParser$stack.peek()), RESULT);
            }
          return CUP$ContentParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // attributes ::= attributes_open attributes_list attributes_close 
            {
              Object RESULT =null;

              CUP$ContentParser$result = parser.getSymbolFactory().newSymbol("attributes",27, ((java_cup.runtime.Symbol)CUP$ContentParser$stack.elementAt(CUP$ContentParser$top-2)), ((java_cup.runtime.Symbol)CUP$ContentParser$stack.peek()), RESULT);
            }
          return CUP$ContentParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // param_open ::= TAG_START PARAM_TAG_NAME NAME_ATTR EQUALS ATTR_VALUE TAG_END 
            {
              Object RESULT =null;
		int paramNameleft = ((java_cup.runtime.Symbol)CUP$ContentParser$stack.elementAt(CUP$ContentParser$top-1)).left;
		int paramNameright = ((java_cup.runtime.Symbol)CUP$ContentParser$stack.elementAt(CUP$ContentParser$top-1)).right;
		String paramName = (String)((java_cup.runtime.Symbol) CUP$ContentParser$stack.elementAt(CUP$ContentParser$top-1)).value;
		 RESULT = paramName; 
              CUP$ContentParser$result = parser.getSymbolFactory().newSymbol("param_open",4, ((java_cup.runtime.Symbol)CUP$ContentParser$stack.elementAt(CUP$ContentParser$top-5)), ((java_cup.runtime.Symbol)CUP$ContentParser$stack.peek()), RESULT);
            }
          return CUP$ContentParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // param_close ::= TAG_CLOSE PARAM_TAG_NAME TAG_END 
            {
              Object RESULT =null;

              CUP$ContentParser$result = parser.getSymbolFactory().newSymbol("param_close",5, ((java_cup.runtime.Symbol)CUP$ContentParser$stack.elementAt(CUP$ContentParser$top-2)), ((java_cup.runtime.Symbol)CUP$ContentParser$stack.peek()), RESULT);
            }
          return CUP$ContentParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // param ::= param_open PARAM_VALUE param_close 
            {
              Object RESULT =null;
		int paramNameleft = ((java_cup.runtime.Symbol)CUP$ContentParser$stack.elementAt(CUP$ContentParser$top-2)).left;
		int paramNameright = ((java_cup.runtime.Symbol)CUP$ContentParser$stack.elementAt(CUP$ContentParser$top-2)).right;
		Object paramName = (Object)((java_cup.runtime.Symbol) CUP$ContentParser$stack.elementAt(CUP$ContentParser$top-2)).value;
		int paramValueleft = ((java_cup.runtime.Symbol)CUP$ContentParser$stack.elementAt(CUP$ContentParser$top-1)).left;
		int paramValueright = ((java_cup.runtime.Symbol)CUP$ContentParser$stack.elementAt(CUP$ContentParser$top-1)).right;
		String paramValue = (String)((java_cup.runtime.Symbol) CUP$ContentParser$stack.elementAt(CUP$ContentParser$top-1)).value;
		
//        System.out.println("paramName is: "+paramName + "with value: "+paramValue);
        Parameter param = new Parameter((String)paramName, (String)paramValue);
        currentAction.addParameter(param);
    
              CUP$ContentParser$result = parser.getSymbolFactory().newSymbol("param",6, ((java_cup.runtime.Symbol)CUP$ContentParser$stack.elementAt(CUP$ContentParser$top-2)), ((java_cup.runtime.Symbol)CUP$ContentParser$stack.peek()), RESULT);
            }
          return CUP$ContentParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // param ::= param_open ID param_close 
            {
              Object RESULT =null;
		int paramNameleft = ((java_cup.runtime.Symbol)CUP$ContentParser$stack.elementAt(CUP$ContentParser$top-2)).left;
		int paramNameright = ((java_cup.runtime.Symbol)CUP$ContentParser$stack.elementAt(CUP$ContentParser$top-2)).right;
		Object paramName = (Object)((java_cup.runtime.Symbol) CUP$ContentParser$stack.elementAt(CUP$ContentParser$top-2)).value;
		int paramValueleft = ((java_cup.runtime.Symbol)CUP$ContentParser$stack.elementAt(CUP$ContentParser$top-1)).left;
		int paramValueright = ((java_cup.runtime.Symbol)CUP$ContentParser$stack.elementAt(CUP$ContentParser$top-1)).right;
		String paramValue = (String)((java_cup.runtime.Symbol) CUP$ContentParser$stack.elementAt(CUP$ContentParser$top-1)).value;
		
//        System.out.println("paramName is: "+paramName + "with value as ID: "+paramValue);
        Parameter param = new Parameter((String)paramName, (String)paramValue);
        currentAction.addParameter(param);
    
              CUP$ContentParser$result = parser.getSymbolFactory().newSymbol("param",6, ((java_cup.runtime.Symbol)CUP$ContentParser$stack.elementAt(CUP$ContentParser$top-2)), ((java_cup.runtime.Symbol)CUP$ContentParser$stack.peek()), RESULT);
            }
          return CUP$ContentParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // params_list ::= param 
            {
              Object RESULT =null;

              CUP$ContentParser$result = parser.getSymbolFactory().newSymbol("params_list",10, ((java_cup.runtime.Symbol)CUP$ContentParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ContentParser$stack.peek()), RESULT);
            }
          return CUP$ContentParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // params_list ::= params_list param 
            {
              Object RESULT =null;

              CUP$ContentParser$result = parser.getSymbolFactory().newSymbol("params_list",10, ((java_cup.runtime.Symbol)CUP$ContentParser$stack.elementAt(CUP$ContentParser$top-1)), ((java_cup.runtime.Symbol)CUP$ContentParser$stack.peek()), RESULT);
            }
          return CUP$ContentParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // params_open ::= TAG_START PARAMS_TAG_NAME TAG_END 
            {
              Object RESULT =null;

              CUP$ContentParser$result = parser.getSymbolFactory().newSymbol("params_open",7, ((java_cup.runtime.Symbol)CUP$ContentParser$stack.elementAt(CUP$ContentParser$top-2)), ((java_cup.runtime.Symbol)CUP$ContentParser$stack.peek()), RESULT);
            }
          return CUP$ContentParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // params_close ::= TAG_CLOSE PARAMS_TAG_NAME TAG_END 
            {
              Object RESULT =null;

              CUP$ContentParser$result = parser.getSymbolFactory().newSymbol("params_close",8, ((java_cup.runtime.Symbol)CUP$ContentParser$stack.elementAt(CUP$ContentParser$top-2)), ((java_cup.runtime.Symbol)CUP$ContentParser$stack.peek()), RESULT);
            }
          return CUP$ContentParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // params ::= params_open params_list params_close 
            {
              Object RESULT =null;

              CUP$ContentParser$result = parser.getSymbolFactory().newSymbol("params",9, ((java_cup.runtime.Symbol)CUP$ContentParser$stack.elementAt(CUP$ContentParser$top-2)), ((java_cup.runtime.Symbol)CUP$ContentParser$stack.peek()), RESULT);
            }
          return CUP$ContentParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // metatag ::= TAG_START TAG_NAME VALUE_ATTR EQUALS ATTR_VALUE TAG_SELF_CLOSE 
            {
              Object RESULT =null;

              CUP$ContentParser$result = parser.getSymbolFactory().newSymbol("metatag",15, ((java_cup.runtime.Symbol)CUP$ContentParser$stack.elementAt(CUP$ContentParser$top-5)), ((java_cup.runtime.Symbol)CUP$ContentParser$stack.peek()), RESULT);
            }
          return CUP$ContentParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // metatags_list ::= metatag 
            {
              Object RESULT =null;

              CUP$ContentParser$result = parser.getSymbolFactory().newSymbol("metatags_list",16, ((java_cup.runtime.Symbol)CUP$ContentParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ContentParser$stack.peek()), RESULT);
            }
          return CUP$ContentParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // metatags_list ::= metatags_list metatag 
            {
              Object RESULT =null;

              CUP$ContentParser$result = parser.getSymbolFactory().newSymbol("metatags_list",16, ((java_cup.runtime.Symbol)CUP$ContentParser$stack.elementAt(CUP$ContentParser$top-1)), ((java_cup.runtime.Symbol)CUP$ContentParser$stack.peek()), RESULT);
            }
          return CUP$ContentParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // metatags_open ::= TAG_START TAGS_NAME TAG_END 
            {
              Object RESULT =null;

              CUP$ContentParser$result = parser.getSymbolFactory().newSymbol("metatags_open",17, ((java_cup.runtime.Symbol)CUP$ContentParser$stack.elementAt(CUP$ContentParser$top-2)), ((java_cup.runtime.Symbol)CUP$ContentParser$stack.peek()), RESULT);
            }
          return CUP$ContentParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // metatags_close ::= TAG_CLOSE TAGS_NAME TAG_END 
            {
              Object RESULT =null;

              CUP$ContentParser$result = parser.getSymbolFactory().newSymbol("metatags_close",18, ((java_cup.runtime.Symbol)CUP$ContentParser$stack.elementAt(CUP$ContentParser$top-2)), ((java_cup.runtime.Symbol)CUP$ContentParser$stack.peek()), RESULT);
            }
          return CUP$ContentParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // metatags ::= metatags_open metatags_list metatags_close 
            {
              Object RESULT =null;

              CUP$ContentParser$result = parser.getSymbolFactory().newSymbol("metatags",19, ((java_cup.runtime.Symbol)CUP$ContentParser$stack.elementAt(CUP$ContentParser$top-2)), ((java_cup.runtime.Symbol)CUP$ContentParser$stack.peek()), RESULT);
            }
          return CUP$ContentParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // action_content ::= action_content params 
            {
              Object RESULT =null;

              CUP$ContentParser$result = parser.getSymbolFactory().newSymbol("action_content",20, ((java_cup.runtime.Symbol)CUP$ContentParser$stack.elementAt(CUP$ContentParser$top-1)), ((java_cup.runtime.Symbol)CUP$ContentParser$stack.peek()), RESULT);
            }
          return CUP$ContentParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // action_content ::= action_content metatags 
            {
              Object RESULT =null;

              CUP$ContentParser$result = parser.getSymbolFactory().newSymbol("action_content",20, ((java_cup.runtime.Symbol)CUP$ContentParser$stack.elementAt(CUP$ContentParser$top-1)), ((java_cup.runtime.Symbol)CUP$ContentParser$stack.peek()), RESULT);
            }
          return CUP$ContentParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // action_content ::= action_content attributes 
            {
              Object RESULT =null;

              CUP$ContentParser$result = parser.getSymbolFactory().newSymbol("action_content",20, ((java_cup.runtime.Symbol)CUP$ContentParser$stack.elementAt(CUP$ContentParser$top-1)), ((java_cup.runtime.Symbol)CUP$ContentParser$stack.peek()), RESULT);
            }
          return CUP$ContentParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // action_content ::= 
            {
              Object RESULT =null;

              CUP$ContentParser$result = parser.getSymbolFactory().newSymbol("action_content",20, ((java_cup.runtime.Symbol)CUP$ContentParser$stack.peek()), RESULT);
            }
          return CUP$ContentParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ContentParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ContentParser$do_action(
    int                        CUP$ContentParser$act_num,
    java_cup.runtime.lr_parser CUP$ContentParser$parser,
    java.util.Stack            CUP$ContentParser$stack,
    int                        CUP$ContentParser$top)
    throws Exception
    {
              return CUP$ContentParser$do_action_part00000000(
                               CUP$ContentParser$act_num,
                               CUP$ContentParser$parser,
                               CUP$ContentParser$stack,
                               CUP$ContentParser$top);
    }
}

}
